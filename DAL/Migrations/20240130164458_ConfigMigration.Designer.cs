// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Utilities.Data;

#nullable disable

namespace Utilities.Migrations
{
    [DbContext(typeof(UtilitiesDb))]
    [Migration("20240130164458_ConfigMigration")]
    partial class ConfigMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Utilities.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<int>("MeterDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedFamily")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ApartmentId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Utilities.Models.Meter", b =>
                {
                    b.Property<int>("MeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MeterLocationId")
                        .HasColumnType("int");

                    b.Property<string>("MeterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeterNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrevCheckDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MeterId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("Utilities.Models.MeterDocument", b =>
                {
                    b.Property<int>("MeterDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterDocumentId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeterDocumentId");

                    b.HasIndex("ApartmentId")
                        .IsUnique();

                    b.ToTable("MeterDocuments");
                });

            modelBuilder.Entity("Utilities.Models.MeterLocation", b =>
                {
                    b.Property<int>("MeterLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterLocationId"));

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeterLocationId");

                    b.HasIndex("MeterId")
                        .IsUnique();

                    b.ToTable("MeterLocations");
                });

            modelBuilder.Entity("Utilities.Models.Meter", b =>
                {
                    b.HasOne("Utilities.Models.Apartment", "Apartment")
                        .WithMany("Meters")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("Utilities.Models.MeterDocument", b =>
                {
                    b.HasOne("Utilities.Models.Apartment", "Apartment")
                        .WithOne("MeterDocument")
                        .HasForeignKey("Utilities.Models.MeterDocument", "ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("Utilities.Models.MeterLocation", b =>
                {
                    b.HasOne("Utilities.Models.Meter", "Meter")
                        .WithOne("MeterLocation")
                        .HasForeignKey("Utilities.Models.MeterLocation", "MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Utilities.Models.Apartment", b =>
                {
                    b.Navigation("MeterDocument");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Utilities.Models.Meter", b =>
                {
                    b.Navigation("MeterLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
