{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../../shared/upload/upload.component\";\nimport * as i4 from \"src/app/core/services/generic-rest.service\";\nexport let AddEditMeterComponent = /*#__PURE__*/(() => {\n  class AddEditMeterComponent {\n    constructor(meterService, fb, router, route) {\n      this.meterService = meterService;\n      this.fb = fb;\n      this.router = router;\n      this.route = route;\n\n      this.uploadFinished = event => {\n        this.response = event;\n      };\n    }\n\n    ngOnInit() {\n      this.id = Number.parseInt(this.route.snapshot.params['id']);\n      this.meterForm = this.fb.group({\n        meterName: ['', [Validators.required]],\n        meterNumber: ['', [Validators.required]],\n        prevCheckDate: [new Date().getFullYear(), [Validators.required]],\n        nextCheckDate: [new Date().getFullYear(), [Validators.required]],\n        apartmentId: ['', [Validators.required]],\n        meterLocation: this.fb.group({\n          name: ['', Validators.required]\n        })\n      });\n\n      if (this.id) {\n        this.meterService.getById(this.id).subscribe(result => {\n          this.meterForm.patchValue(result);\n          this.response = {\n            dbPath: result.docPath\n          };\n        }, error => console.error(error));\n      }\n    }\n\n    sendData(data) {\n      if (!this.id) this.createMeter(data);else this.updateMeter(data);\n      this.router.navigate([`/meters`]);\n    }\n\n    createMeter(data) {\n      let meter = Object.assign(Object.assign({}, data), {\n        docPath: this.response.dbPath\n      });\n      this.meterService.add(meter).subscribe(result => console.log(result), error => console.error(error));\n    }\n\n    updateMeter(data) {\n      let meter = Object.assign({\n        id: this.id,\n        docPath: this.response.dbPath\n      }, data);\n      this.meterService.update(this.id, meter).subscribe(result => console.log(result), error => console.error(error));\n    }\n\n  }\n\n  AddEditMeterComponent.ɵfac = function AddEditMeterComponent_Factory(t) {\n    return new (t || AddEditMeterComponent)(i0.ɵɵdirectiveInject('meterService'), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  AddEditMeterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditMeterComponent,\n    selectors: [[\"app-add-edit-meter\"]],\n    decls: 32,\n    vars: 2,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [\"method\", \"post\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"meterName\"], [\"id\", \"meterName\", \"type\", \"text\", \"formControlName\", \"meterName\", 1, \"form-control\"], [\"for\", \"meterNumber\"], [\"id\", \"meterNumber\", \"type\", \"text\", \"formControlName\", \"meterNumber\", 1, \"form-control\"], [\"for\", \"prevCheckDate\"], [\"id\", \"prevCheckDate\", \"type\", \"date\", \"formControlName\", \"prevCheckDate\", 1, \"form-control\"], [\"for\", \"nextCheckDate\"], [\"id\", \"nextCheckDate\", \"type\", \"date\", \"formControlName\", \"nextCheckDate\", 1, \"form-control\"], [\"for\", \"apartmentId\"], [\"id\", \"apartmentId\", \"type\", \"text\", \"formControlName\", \"apartmentId\", 1, \"form-control\"], [\"formGroupName\", \"meterLocation\"], [\"for\", \"location\"], [\"id\", \"location\", \"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [3, \"onUploadFinished\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n    template: function AddEditMeterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditMeterComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.sendData(ctx.meterForm.value);\n        });\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"label\", 5);\n        i0.ɵɵtext(6, \"Meter Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"label\", 7);\n        i0.ɵɵtext(10, \"Meter Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 9);\n        i0.ɵɵtext(14, \"Previous Check Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 4)(17, \"label\", 11);\n        i0.ɵɵtext(18, \"Next Check Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 4)(21, \"label\", 13);\n        i0.ɵɵtext(22, \"Apartment Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 15)(25, \"div\", 4)(26, \"label\", 16);\n        i0.ɵɵtext(27, \"Meter Location\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"input\", 17);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"app-upload\", 18);\n        i0.ɵɵlistener(\"onUploadFinished\", function AddEditMeterComponent_Template_app_upload_onUploadFinished_29_listener($event) {\n          return ctx.uploadFinished($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 19);\n        i0.ɵɵtext(31, \"Submit\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.meterForm);\n        i0.ɵɵadvance(27);\n        i0.ɵɵproperty(\"disabled\", !ctx.meterForm.valid);\n      }\n    },\n    dependencies: [i3.UploadComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName]\n  });\n  return AddEditMeterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}