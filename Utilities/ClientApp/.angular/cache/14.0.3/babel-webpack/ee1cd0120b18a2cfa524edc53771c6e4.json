{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/string-converter.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\n\nfunction AddEditFormComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"label\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const field_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", field_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.getFormattedFields(field_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", field_r1)(\"formControlName\", field_r1);\n  }\n}\n\nexport let AddEditFormComponent = /*#__PURE__*/(() => {\n  class AddEditFormComponent {\n    constructor(stringConverter, fb, router, route) {\n      this.stringConverter = stringConverter;\n      this.fb = fb;\n      this.router = router;\n      this.route = route;\n    }\n\n    ngOnInit() {\n      this.form = this.fb.group({});\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      this.formFields.forEach(field => this.form.addControl(field, this.fb.control('')));\n\n      if (!this.isAddMode) {\n        this.genericRestService.getById(this.id).subscribe(result => this.form.patchValue(result), error => console.error(error));\n      }\n    }\n\n    sendData(data) {\n      if (this.isAddMode) this.createEntity(data);else this.updateEntity(data);\n      this.router.navigate([`/${this.entityType}s`]);\n    }\n\n    getFormattedFields(field) {\n      return this.stringConverter.convertFirstLetterToUpper(field);\n    }\n\n    createEntity(data) {\n      let entity = Object.assign({}, data);\n      this.genericRestService.add(entity).subscribe(result => console.log(result), error => console.error(error));\n    }\n\n    updateEntity(data) {\n      let entity = Object.assign({\n        id: this.id\n      }, data);\n      this.genericRestService.update(this.id, entity).subscribe(result => console.log(result), error => console.error(error));\n    }\n\n  }\n\n  AddEditFormComponent.ɵfac = function AddEditFormComponent_Factory(t) {\n    return new (t || AddEditFormComponent)(i0.ɵɵdirectiveInject(i1.StringConverterService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  AddEditFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditFormComponent,\n    selectors: [[\"app-add-edit-form\"]],\n    inputs: {\n      formFields: \"formFields\",\n      entityType: \"entityType\",\n      genericRestService: \"genericRestService\"\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [\"method\", \"post\", 3, \"formGroup\", \"ngSubmit\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"form-group\"], [3, \"for\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"formControlName\"]],\n    template: function AddEditFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditFormComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.sendData(ctx.form.value);\n        });\n        i0.ɵɵtemplate(4, AddEditFormComponent_div_4_Template, 4, 4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"button\", 5);\n        i0.ɵɵtext(6, \"Submit\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.formFields);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n      }\n    },\n    dependencies: [i4.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName]\n  });\n  return AddEditFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}