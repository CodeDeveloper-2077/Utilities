{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/authentication.service\";\nimport * as i2 from \"src/app/core/services/password-confirmation-validator.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\n\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelement(1, \"span\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.errorMessage, i0.ɵɵsanitizeHtml);\n  }\n}\n\nconst _c0 = function () {\n  return [\"/authentication/login\"];\n};\n\nfunction ResetPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Your password has been reset. Please \");\n    i0.ɵɵelementStart(2, \"a\", 18);\n    i0.ɵɵtext(3, \" click here to log in. \");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\n\nfunction ResetPasswordComponent_em_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_em_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Confirmation is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_em_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Passwords must match\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(authService, passConfValidator, fb, route) {\n      this.authService = authService;\n      this.passConfValidator = passConfValidator;\n      this.fb = fb;\n      this.route = route;\n\n      this.validateControl = controlName => {\n        return this.resetPasswordForm.get(controlName).invalid && this.resetPasswordForm.get(controlName).touched;\n      };\n\n      this.hasError = (controlName, errorName) => {\n        return this.resetPasswordForm.get(controlName).hasError(errorName);\n      };\n\n      this.resetPassword = resetPasswordFormValue => {\n        this.showError = this.showSuccess = false;\n        const resetPass = Object.assign({}, resetPasswordFormValue);\n        const resetPasswordDto = {\n          password: resetPass.password,\n          confirmPassword: resetPass.confirm,\n          token: this.token,\n          email: this.email\n        };\n        this.authService.resetPassword(\"api/accounts/resetpassword\", resetPasswordDto).subscribe({\n          next: () => this.showSuccess = true,\n          error: error => {\n            this.showError = true;\n            this.errorMessage = error.message;\n          }\n        });\n      };\n    }\n\n    ngOnInit() {\n      this.resetPasswordForm = this.fb.group({\n        password: ['', [Validators.required]],\n        confirm: ['']\n      });\n      this.resetPasswordForm.get('confirm').setValidators([Validators.required, this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password'))]);\n      this.token = this.route.snapshot.queryParams[\"token\"];\n      this.email = this.route.snapshot.queryParams[\"email\"];\n    }\n\n  }\n\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.PasswordConfirmationValidatorService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 27,\n    vars: 7,\n    consts: [[1, \"card\"], [1, \"card-body\"], [1, \"card-title\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", \"role\", \"alert\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"row\"], [\"for\", \"password\", 1, \"col-form-label\", \"col-sm-2\"], [1, \"col-md-5\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [4, \"ngIf\"], [\"for\", \"confirm\", 1, \"col-form-label\", \"col-sm-2\"], [\"type\", \"password\", \"id\", \"confirm\", \"formControlName\", \"confirm\", 1, \"form-control\"], [1, \"col-md-1\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", 3, \"disabled\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [3, \"innerHTML\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [3, \"routerLink\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Reset Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, ResetPasswordComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵtemplate(5, ResetPasswordComponent_div_5_Template, 4, 2, \"div\", 4);\n        i0.ɵɵelementStart(6, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.resetPassword(ctx.resetPasswordForm.value);\n        });\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵtemplate(13, ResetPasswordComponent_em_13_Template, 2, 0, \"em\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 11);\n        i0.ɵɵtext(16, \"Confirm Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 8);\n        i0.ɵɵelement(18, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 8);\n        i0.ɵɵtemplate(20, ResetPasswordComponent_em_20_Template, 2, 0, \"em\", 10);\n        i0.ɵɵtemplate(21, ResetPasswordComponent_em_21_Template, 2, 0, \"em\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵelementStart(23, \"div\", 6)(24, \"div\", 13)(25, \"button\", 14);\n        i0.ɵɵtext(26, \"Submit\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"confirm\") && ctx.hasError(\"confirm\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"confirm\", \"mustMatch\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.resetPasswordForm.valid);\n      }\n    },\n    dependencies: [i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.RouterLinkWithHref]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}