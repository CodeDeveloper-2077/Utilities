{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { CustomEncoder } from './CustomEncoder';\nimport { AppSettings } from '../constants/AppSettings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, jwtHelper) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.authChangeSub = new Subject();\n      this.authChanged = this.authChangeSub.asObservable();\n\n      this.registerUser = (route, user) => {\n        return this.http.post(`${AppSettings.API_ENDPOINT}${route}`, user);\n      };\n\n      this.loginUser = (route, user) => {\n        return this.http.post(`${AppSettings.API_ENDPOINT}${route}`, user);\n      };\n\n      this.logoutUser = () => {\n        localStorage.removeItem(\"token\");\n        this.sendAuthStateChangeNotification(false);\n      };\n\n      this.isUserAuthenticated = () => {\n        const token = localStorage.getItem(\"token\");\n        return token && !this.jwtHelper.isTokenExpired(token);\n      };\n\n      this.sendAuthStateChangeNotification = isAuthenticated => {\n        return this.authChangeSub.next(isAuthenticated);\n      };\n\n      this.isUserAdmin = () => {\n        const token = localStorage.getItem(\"token\");\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n        return role === \"Administrator\";\n      };\n\n      this.forgorPassword = (route, body) => {\n        return this.http.post(`${AppSettings.API_ENDPOINT}${route}`, body);\n      };\n\n      this.resetPassword = (route, body) => {\n        return this.http.post(`${AppSettings.API_ENDPOINT}${route}`, body);\n      };\n\n      this.confirmEmail = (route, token, email) => {\n        let params = new HttpParams({\n          encoder: new CustomEncoder()\n        });\n        params = params.append('token', token);\n        params = params.append('email', email);\n        return this.http.get(`${AppSettings.API_ENDPOINT}${route}`, {\n          params: params\n        });\n      };\n\n      this.twoStepLogin = (route, body) => {\n        return this.http.post(`${AppSettings.API_ENDPOINT}${route}`, body);\n      };\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}