{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction TwoStepVerificationComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\n\nfunction TwoStepVerificationComponent_em_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"The Code is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let TwoStepVerificationComponent = /*#__PURE__*/(() => {\n  class TwoStepVerificationComponent {\n    constructor(authService, route, fb, router) {\n      this.authService = authService;\n      this.route = route;\n      this.fb = fb;\n      this.router = router;\n\n      this.validateControl = controlName => {\n        return this.twoStepForm.get(controlName).invalid && this.twoStepForm.get(controlName).touched;\n      };\n\n      this.hasError = (controlName, errorName) => {\n        return this.twoStepForm.get(controlName).hasError(errorName);\n      };\n\n      this.loginUser = twoStepFromValue => {\n        this.showError = false;\n        const formValue = Object.assign({}, twoStepFromValue);\n        let twoFactorDto = {\n          email: this.email,\n          provider: this.provider,\n          token: formValue.twoFactorCode\n        };\n        this.authService.twoStepLogin('api/accounts/twostepverification', twoFactorDto).subscribe({\n          next: res => {\n            localStorage.setItem(\"token\", res.token);\n            this.authService.sendAuthStateChangeNotification(res.isAuthSuccessful);\n            this.router.navigate([this.returnUrl]);\n          },\n          error: err => {\n            this.errorMessage = err.message;\n            this.showError = true;\n          }\n        });\n      };\n    }\n\n    ngOnInit() {\n      this.twoStepForm = this.fb.group({\n        twoFactorCode: ['', [Validators.required]]\n      });\n      this.provider = this.route.snapshot.queryParams['provider'];\n      this.email = this.route.snapshot.queryParams['email'];\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n    }\n\n  }\n\n  TwoStepVerificationComponent.ɵfac = function TwoStepVerificationComponent_Factory(t) {\n    return new (t || TwoStepVerificationComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  TwoStepVerificationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TwoStepVerificationComponent,\n    selectors: [[\"app-two-step-verification\"]],\n    decls: 18,\n    vars: 4,\n    consts: [[1, \"card\"], [1, \"card-body\"], [1, \"card-title\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"row\"], [\"for\", \"twoFactorCode\", 1, \"col-form-label\", \"col-sm-2\"], [1, \"col-md-5\"], [\"type\", \"text\", \"id\", \"twoFactorCode\", \"formControlName\", \"twoFactorCode\", 1, \"form-control\"], [4, \"ngIf\"], [1, \"col-md-1\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", 3, \"disabled\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"]],\n    template: function TwoStepVerificationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Two Step Verification\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, TwoStepVerificationComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function TwoStepVerificationComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.loginUser(ctx.twoStepForm.value);\n        });\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Code:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7);\n        i0.ɵɵtemplate(12, TwoStepVerificationComponent_em_12_Template, 2, 0, \"em\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(13, \"br\");\n        i0.ɵɵelementStart(14, \"div\", 5)(15, \"div\", 10)(16, \"button\", 11);\n        i0.ɵɵtext(17, \"Submit\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.twoStepForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"twoFactorCode\") && ctx.hasError(\"twoFactorCode\", \"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.twoStepForm.valid);\n      }\n    },\n    dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName]\n  });\n  return TwoStepVerificationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}